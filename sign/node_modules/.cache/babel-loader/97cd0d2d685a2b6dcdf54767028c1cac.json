{"ast":null,"code":"var _jsxFileName = \"/Users/yugo_tokuchi/scripts/blocto-sign-verify/sign/src/SignUserMessage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Card = styled.div`\n  margin: 10px 5px;\n  padding: 10px;\n  border: 1px solid #c0c0c0;\n  border-radius: 5px;\n`;\n_c = Card;\nconst Code = styled.pre`\n  background: #f0f0f0;\n  border-radius: 5px;\n  max-height: 150px;\n  overflow-y: auto;\n  padding: 5px;\n`;\n\nconst GetLatestBlock = () => {\n  _s();\n\n  const [signedMessage, setSignedMessage] = useState(\"--\");\n  const [compSignatures, setCompSignatures] = useState(\"--\");\n  const [userAddress, setUserAddress] = useState(\"--\");\n\n  const signUserMessage = async event => {\n    event.preventDefault();\n    const currentTimestamp = String(new Date().getTime());\n    const hexMessage = utf8ToHex(currentTimestamp);\n    const compSignatures = await fcl.currentUser().signUserMessage(hexMessage);\n    window.parent.postMessage({\n      message: \"compSignatures\",\n      value: {\n        signedMessage: currentTimestamp,\n        compSignatures: compSignatures\n      }\n    }, \"*\");\n    setSignedMessage(currentTimestamp);\n    setCompSignatures(JSON.stringify(compSignatures));\n    setUserAddress(compSignatures[0].addr);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: signUserMessage,\n      children: \"Sign\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), \"userAddress: \", userAddress, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), \"message: \", signedMessage, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), \"compSignatures: \", compSignatures]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GetLatestBlock, \"1sT6eGtogCtGQ6tNaJWlXLVPnw0=\");\n\n_c2 = GetLatestBlock;\n\nfunction utf8ToHex(str) {\n  return Array.from(str).map(c => c.charCodeAt(0) < 128 ? c.charCodeAt(0).toString(16) : encodeURIComponent(c).replace(/\\%/g, \"\").toLowerCase()).join(\"\");\n}\n\nfunction hexToUtf8(hex) {\n  return decodeURIComponent(\"%\" + hex.match(/.{1,2}/g).join(\"%\"));\n}\n\nexport default GetLatestBlock;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"GetLatestBlock\");","map":{"version":3,"sources":["/Users/yugo_tokuchi/scripts/blocto-sign-verify/sign/src/SignUserMessage.js"],"names":["React","useState","fcl","styled","Card","div","Code","pre","GetLatestBlock","signedMessage","setSignedMessage","compSignatures","setCompSignatures","userAddress","setUserAddress","signUserMessage","event","preventDefault","currentTimestamp","String","Date","getTime","hexMessage","utf8ToHex","currentUser","window","parent","postMessage","message","value","JSON","stringify","addr","str","Array","from","map","c","charCodeAt","toString","encodeURIComponent","replace","toLowerCase","join","hexToUtf8","hex","decodeURIComponent","match"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAEA,MAAMC,IAAI,GAAGD,MAAM,CAACE,GAAI;AACxB;AACA;AACA;AACA;AACA,CALA;KAAMD,I;AAON,MAAME,IAAI,GAAGH,MAAM,CAACI,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA,CANA;;AAQA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACU,cAAD,EAAiBC,iBAAjB,IAAsCX,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACY,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,IAAD,CAA9C;;AAEA,QAAMc,eAAe,GAAG,MAAOC,KAAP,IAAiB;AACvCA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,gBAAgB,GAAGC,MAAM,CAAC,IAAIC,IAAJ,GAAWC,OAAX,EAAD,CAA/B;AACA,UAAMC,UAAU,GAAGC,SAAS,CAACL,gBAAD,CAA5B;AACA,UAAMP,cAAc,GAAG,MAAMT,GAAG,CAACsB,WAAJ,GAAkBT,eAAlB,CAAkCO,UAAlC,CAA7B;AACAG,IAAAA,MAAM,CAACC,MAAP,CAAcC,WAAd,CACE;AACEC,MAAAA,OAAO,EAAE,gBADX;AAEEC,MAAAA,KAAK,EAAE;AACLpB,QAAAA,aAAa,EAAES,gBADV;AAELP,QAAAA,cAAc,EAAEA;AAFX;AAFT,KADF,EAQE,GARF;AAUAD,IAAAA,gBAAgB,CAACQ,gBAAD,CAAhB;AACAN,IAAAA,iBAAiB,CAACkB,IAAI,CAACC,SAAL,CAAepB,cAAf,CAAD,CAAjB;AACAG,IAAAA,cAAc,CAACH,cAAc,CAAC,CAAD,CAAd,CAAkBqB,IAAnB,CAAd;AACD,GAlBD;;AAoBA,sBACE,QAAC,IAAD;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAEjB,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA,YAFF,mBAGgBF,WAHhB,eAIE;AAAA;AAAA;AAAA;AAAA,YAJF,eAKYJ,aALZ,eAME;AAAA;AAAA;AAAA;AAAA,YANF,sBAOmBE,cAPnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CApCD;;GAAMH,c;;MAAAA,c;;AAqCN,SAASe,SAAT,CAAmBU,GAAnB,EAAwB;AACtB,SAAOC,KAAK,CAACC,IAAN,CAAWF,GAAX,EACJG,GADI,CACCC,CAAD,IACHA,CAAC,CAACC,UAAF,CAAa,CAAb,IAAkB,GAAlB,GACID,CAAC,CAACC,UAAF,CAAa,CAAb,EAAgBC,QAAhB,CAAyB,EAAzB,CADJ,GAEIC,kBAAkB,CAACH,CAAD,CAAlB,CAAsBI,OAAtB,CAA8B,KAA9B,EAAqC,EAArC,EAAyCC,WAAzC,EAJD,EAMJC,IANI,CAMC,EAND,CAAP;AAOD;;AACD,SAASC,SAAT,CAAmBC,GAAnB,EAAwB;AACtB,SAAOC,kBAAkB,CAAC,MAAMD,GAAG,CAACE,KAAJ,CAAU,SAAV,EAAqBJ,IAArB,CAA0B,GAA1B,CAAP,CAAzB;AACD;;AACD,eAAenC,cAAf","sourcesContent":["import React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport styled from \"styled-components\";\n\nconst Card = styled.div`\n  margin: 10px 5px;\n  padding: 10px;\n  border: 1px solid #c0c0c0;\n  border-radius: 5px;\n`;\n\nconst Code = styled.pre`\n  background: #f0f0f0;\n  border-radius: 5px;\n  max-height: 150px;\n  overflow-y: auto;\n  padding: 5px;\n`;\n\nconst GetLatestBlock = () => {\n  const [signedMessage, setSignedMessage] = useState(\"--\");\n  const [compSignatures, setCompSignatures] = useState(\"--\");\n  const [userAddress, setUserAddress] = useState(\"--\");\n\n  const signUserMessage = async (event) => {\n    event.preventDefault();\n    const currentTimestamp = String(new Date().getTime());\n    const hexMessage = utf8ToHex(currentTimestamp);\n    const compSignatures = await fcl.currentUser().signUserMessage(hexMessage);\n    window.parent.postMessage(\n      {\n        message: \"compSignatures\",\n        value: {\n          signedMessage: currentTimestamp,\n          compSignatures: compSignatures,\n        },\n      },\n      \"*\"\n    );\n    setSignedMessage(currentTimestamp);\n    setCompSignatures(JSON.stringify(compSignatures));\n    setUserAddress(compSignatures[0].addr);\n  };\n\n  return (\n    <Card>\n      <button onClick={signUserMessage}>Sign</button>\n      <br />\n      userAddress: {userAddress}\n      <br />\n      message: {signedMessage}\n      <br />\n      compSignatures: {compSignatures}\n    </Card>\n  );\n};\nfunction utf8ToHex(str) {\n  return Array.from(str)\n    .map((c) =>\n      c.charCodeAt(0) < 128\n        ? c.charCodeAt(0).toString(16)\n        : encodeURIComponent(c).replace(/\\%/g, \"\").toLowerCase()\n    )\n    .join(\"\");\n}\nfunction hexToUtf8(hex) {\n  return decodeURIComponent(\"%\" + hex.match(/.{1,2}/g).join(\"%\"));\n}\nexport default GetLatestBlock;\n"]},"metadata":{},"sourceType":"module"}