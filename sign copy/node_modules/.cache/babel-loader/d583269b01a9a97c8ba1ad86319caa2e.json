{"ast":null,"code":"var _jsxFileName = \"/Users/yugo_tokuchi/scripts/blocto-sign-verify/sign/src/VerifyUserMessage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Card = styled.div`\n  margin: 10px 5px;\n  padding: 10px;\n  border: 1px solid #c0c0c0;\n  border-radius: 5px;\n`;\n_c = Card;\nconst Code = styled.pre`\n  background: #f0f0f0;\n  border-radius: 5px;\n  max-height: 150px;\n  overflow-y: auto;\n  padding: 5px;\n`;\n\nconst VerifyUserMessage = () => {\n  _s();\n\n  const [message, setMessage] = useState(\"address\");\n  const [signature, setSignature] = useState(\"signature\");\n  const [signedMessage, setSignedMessage] = useState(\"\");\n  const [userAddress, setUserAddress] = useState(\"\");\n  const [compositeSignature, setCompositeSignature] = useState({\n    f_type: \"CompositeSignature\",\n    f_vsn: \"1.0.0\",\n    addr: \"\",\n    keyId: 1,\n    signature: \"\"\n  });\n\n  const signUserMessage = async event => {\n    event.preventDefault();\n    const hexMessage = utf8ToHex(message);\n    console.log(\"signature to be verify\", compositeSignature);\n    const response = await fcl.currentUser().verifyUserSignatures(hexMessage, [compositeSignature]);\n    console.log(response);\n  };\n\n  const updateSignature = event => {\n    setSignature(event.target.value);\n    compositeSignature.signature = event.target.value;\n    setCompositeSignature(compositeSignature);\n  };\n\n  const updateUserAddress = event => {\n    setUserAddress(event.target.value);\n    compositeSignature.addr = event.target.value;\n    setCompositeSignature(compositeSignature);\n  };\n\n  const updateMessage = event => {\n    setMessage(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Signature:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: signature,\n        onChange: updateSignature\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Address:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userAddress,\n        onChange: updateUserAddress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Message:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: updateMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: signUserMessage,\n      children: \"Sign\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), \"userAddress: \", userAddress, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), \"message: \", signedMessage]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(VerifyUserMessage, \"fDgm4aqd1fwpdNKL3M8biH5OEnM=\");\n\n_c2 = VerifyUserMessage;\n\nfunction utf8ToHex(str) {\n  return Array.from(str).map(c => c.charCodeAt(0) < 128 ? c.charCodeAt(0).toString(16) : encodeURIComponent(c).replace(/\\%/g, \"\").toLowerCase()).join(\"\");\n}\n\nfunction hexToUtf8(hex) {\n  return decodeURIComponent(\"%\" + hex.match(/.{1,2}/g).join(\"%\"));\n}\n\nexport default VerifyUserMessage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"VerifyUserMessage\");","map":{"version":3,"sources":["/Users/yugo_tokuchi/scripts/blocto-sign-verify/sign/src/VerifyUserMessage.js"],"names":["React","useState","fcl","styled","Card","div","Code","pre","VerifyUserMessage","message","setMessage","signature","setSignature","signedMessage","setSignedMessage","userAddress","setUserAddress","compositeSignature","setCompositeSignature","f_type","f_vsn","addr","keyId","signUserMessage","event","preventDefault","hexMessage","utf8ToHex","console","log","response","currentUser","verifyUserSignatures","updateSignature","target","value","updateUserAddress","updateMessage","str","Array","from","map","c","charCodeAt","toString","encodeURIComponent","replace","toLowerCase","join","hexToUtf8","hex","decodeURIComponent","match"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport styled from \"styled-components\";\nconst Card = styled.div`\n  margin: 10px 5px;\n  padding: 10px;\n  border: 1px solid #c0c0c0;\n  border-radius: 5px;\n`;\n\nconst Code = styled.pre`\n  background: #f0f0f0;\n  border-radius: 5px;\n  max-height: 150px;\n  overflow-y: auto;\n  padding: 5px;\n`;\n\nconst VerifyUserMessage = () => {\n  const [message, setMessage] = useState(\"address\");\n  const [signature, setSignature] = useState(\"signature\");\n  const [signedMessage, setSignedMessage] = useState(\"\");\n  const [userAddress, setUserAddress] = useState(\"\");\n  const [compositeSignature, setCompositeSignature] = useState({\n    f_type: \"CompositeSignature\",\n    f_vsn: \"1.0.0\",\n    addr: \"\",\n    keyId: 1,\n    signature: \"\",\n  });\n  const signUserMessage = async (event) => {\n    event.preventDefault();\n    const hexMessage = utf8ToHex(message);\n    console.log(\"signature to be verify\", compositeSignature);\n    const response = await fcl\n      .currentUser()\n      .verifyUserSignatures(hexMessage, [compositeSignature]);\n    console.log(response);\n  };\n  const updateSignature = (event) => {\n    setSignature(event.target.value);\n    compositeSignature.signature = event.target.value;\n    setCompositeSignature(compositeSignature);\n  };\n  const updateUserAddress = (event) => {\n    setUserAddress(event.target.value);\n    compositeSignature.addr = event.target.value;\n    setCompositeSignature(compositeSignature);\n  };\n\n  const updateMessage = (event) => {\n    setMessage(event.target.value);\n  };\n\n  return (\n    <Card>\n      <label>\n        Signature:\n        <input type=\"text\" value={signature} onChange={updateSignature} />\n      </label>\n      <label>\n        Address:\n        <input type=\"text\" value={userAddress} onChange={updateUserAddress} />\n      </label>\n      <label>\n        Message:\n        <input type=\"text\" value={message} onChange={updateMessage} />\n      </label>\n      <button onClick={signUserMessage}>Sign</button>\n      <br />\n      userAddress: {userAddress}\n      <br />\n      message: {signedMessage}\n    </Card>\n  );\n};\nfunction utf8ToHex(str) {\n  return Array.from(str)\n    .map((c) =>\n      c.charCodeAt(0) < 128\n        ? c.charCodeAt(0).toString(16)\n        : encodeURIComponent(c).replace(/\\%/g, \"\").toLowerCase()\n    )\n    .join(\"\");\n}\nfunction hexToUtf8(hex) {\n  return decodeURIComponent(\"%\" + hex.match(/.{1,2}/g).join(\"%\"));\n}\n\nexport default VerifyUserMessage;\n"]},"metadata":{},"sourceType":"module"}